/// DO NOT EDIT THIS FILE! ///
#[cfg(test)]
mod tests{
    use crate::{Snack, SnackBasket};


    #[test]
    fn test_adding_snack() {
        let mut my_bag = SnackBasket{ container: vec![] };
        assert_eq!(my_bag.add_snack(Snack::BunBun), "Added BunBun".to_string());
        assert_eq!(my_bag.add_snack(Snack::Lay), "Added Lay".to_string());
        assert_eq!(my_bag.add_snack(Snack::RollerCoaster), "Added RollerCoaster".to_string());
        assert_eq!(my_bag.add_snack(Snack::Taro), "Added Taro".to_string());
    }

    #[test]
    fn test_remove_snack() {
        let mut my_bag = SnackBasket{ container: vec![] };
        my_bag.add_snack(Snack::BunBun);
        my_bag.add_snack(Snack::Lay);
        my_bag.add_snack(Snack::RollerCoaster);
        my_bag.add_snack(Snack::Taro);

        assert_eq!(my_bag.remove_last_snack(), "Removed Taro".to_string());
        assert_eq!(my_bag.remove_last_snack(), "Removed RollerCoaster".to_string());
        assert_eq!(my_bag.remove_last_snack(), "Removed Lay".to_string());
        assert_eq!(my_bag.remove_last_snack(), "Removed BunBun".to_string());
        assert_eq!(my_bag.remove_last_snack(), "Nothing to remove".to_string());
    }

}