/// DO NOT EDIT THIS FILE! ///
#[cfg(test)]
mod tests {
    use std::collections::HashMap;

    use crate::{dont_mess_my_work, Agent};

    #[test]
    fn test_agent_creation() {
        let jane_doe = Agent::new("Jane Doe".into(), 101, 1000, 400, -2.0, -55.0, false);
        assert_eq!(jane_doe.level, 100);
        assert_eq!(jane_doe.cri_rate, 0.0);
        assert_eq!(jane_doe.cri_damage, 0.0);

        let miyabi = Agent::new("Hoshino Miyabi".into(), -1, 4000, 400, 79.2, 179.12, false);
        assert_eq!(miyabi.level, 1);
    }

    #[test]
    fn test_agent_creation2() {
        let miyabi = Agent::new("Hoshino Miyabi".into(), 0, 4000, 400, 79.2, 179.12, false);
        assert_eq!(miyabi.level, 1);
    }

    #[test]
    fn test_report() {
        let mut hm: HashMap<String, String> = HashMap::new();
        let astra_yao = Agent::new("Astra Yao".to_string(), 55, 3125, 160, 33.0, 56.25, true);
        let report = astra_yao.report_agent_info();
        for e_key in report.split("\n") {
            let (k, v) = {
                let mut mark = 0;
                for (pos, c) in e_key.chars().enumerate() {
                    if c == ':' {
                        mark = pos;
                        break;
                    }
                }
                (
                    e_key[..mark].to_string(),
                    e_key[mark + 1..].trim().to_string(),
                )
            };
            hm.insert(k, v);
        }
        assert!(hm.contains_key("Name"));
        println!("NAME PASS");
        assert!(hm.contains_key("Level"));
        println!("LEVEL PASS");
        assert!(hm.contains_key("Attack"));
        println!("ATTACK PASS");
        assert!(hm.contains_key("Defend"));
        println!("DEFEND PASS");
        assert!(hm.contains_key("Critical Rate"));
        println!("CRI_RATE PASS");
        assert!(hm.contains_key("Critical Damage"));
        println!("CRI_DAM PASS");

        assert!(hm.contains_key("Awaken"));
        println!("AWAKEN_KEY PASS");

        let awaken_response = hm.get("Awaken").unwrap().clone();
        assert!(awaken_response.to_lowercase() == "yes" || awaken_response.to_lowercase() == "no");
        println!("AWAKEN_VALUE PASS");
    }

    #[test]
    fn test_attack() {
        let jane_doe = Agent::new("Jane Doe".into(), 100, 3000, 1600, 60.3, 120.25 , true);
        let lycaon = Agent::new("Lycaon".into(), 100, 1600, 2700, 52.4, 77.3, false);

        assert!(jane_doe.action_attack(&lycaon));
        assert!(!lycaon.action_attack(&jane_doe));
    }

    #[test]
    fn test_defend() {
        let jane_doe = Agent::new("Jane Doe".into(), 100, 3000, 1600, 60.3, 120.25 , true);
        let lycaon = Agent::new("Lycaon".into(), 100, 1600, 2700, 52.4, 77.3, false);

        assert!(jane_doe.action_defend(&lycaon));
        assert!(!lycaon.action_attack(&jane_doe));
    }

    #[test]
    fn test_dont_mess_my_work() {
        assert_eq!(dont_mess_my_work(), "Anby wins over Noob".to_string())
    }
}
